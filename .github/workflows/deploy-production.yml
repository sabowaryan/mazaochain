name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run security scan
        run: npm run security-scan

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/production/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            # Navigate to application directory
            cd /opt/mazaochain

            # Pull latest code
            git pull origin main

            # Update environment variables
            cp .env.production.example .env.production
            
            # Update Docker image in docker-compose
            sed -i 's|image:.*|image: ${{ needs.build.outputs.image }}|' deployment/production/docker-compose.yml

            # Create backup before deployment
            npm run backup-db

            # Deploy with zero-downtime
            docker-compose -f deployment/production/docker-compose.yml pull
            docker-compose -f deployment/production/docker-compose.yml up -d --no-deps mazaochain-app

            # Wait for health check
            timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

            # Update nginx and other services if needed
            docker-compose -f deployment/production/docker-compose.yml up -d

            # Cleanup old images
            docker image prune -f
          EOF

      - name: Run post-deployment tests
        run: |
          # Wait a bit for services to stabilize
          sleep 30
          
          # Run smoke tests against production
          curl -f https://mazaochain.com/api/health
          
          # Run critical path tests
          npm run test:smoke -- --baseUrl=https://mazaochain.com

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  rollback:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    steps:
      - name: Rollback deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/mazaochain
            
            # Get previous image tag
            PREVIOUS_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep mazaochain | sed -n '2p')
            
            if [ -n "$PREVIOUS_IMAGE" ]; then
              echo "Rolling back to: $PREVIOUS_IMAGE"
              
              # Update docker-compose with previous image
              sed -i "s|image:.*|image: $PREVIOUS_IMAGE|" deployment/production/docker-compose.yml
              
              # Deploy previous version
              docker-compose -f deployment/production/docker-compose.yml up -d --no-deps mazaochain-app
              
              # Wait for health check
              timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
              
              echo "Rollback completed"
            else
              echo "No previous image found for rollback"
              exit 1
            fi
          EOF